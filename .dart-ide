{
    "key": "LogMemo_0.0.0_2_1736140191264",
    "projectType": "Blank",
    "projectGroup": null,
    "templateInfo": {
        "type": "Blank",
        "title": "Blank",
        "category": null,
        "group": null,
        "dartPackageInfo": {
            "title": "",
            "group": "",
            "type": "",
            "category": ""
        }
    },
    "packageName": "com.sample.logmemo",
    "ideMode": "basic",
    "isUserCommand": false,
    "projectConfigFile": {
        ".eslintignore": "node_modules\npublic\nlib\nsrc/buc\nsrc/BUC",
        ".eslintrc": "{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true,\n    \"jest\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:prettier/recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"tsx\": true,\n      \"ts\": true,\n      \"jsx\": true,\n      \"js\": true\n    },\n    \"ecmaVersion\": \"latest\",\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\n    \"react\",\n    \"@typescript-eslint\"\n  ],\n  \"settings\": {\n    \"react\": {\n      \"version\": \"detect\"\n    }\n  },\n  \"rules\": {\n    \"indent\": [\n      \"error\",\n      2\n    ],\n    \"quotes\": [\n      \"error\",\n      \"single\",\n      {\n        \"avoidEscape\": true,\n        \"allowTemplateLiterals\": true\n      }\n    ],\n    \"semi\": [\n      \"error\",\n      \"always\"\n    ],\n    \"eol-last\": [\n      \"error\",\n      \"always\"\n    ],\n    \"arrow-spacing\": [\n      \"error\",\n      {\n        \"before\": true,\n        \"after\": true\n      }\n    ],\n    \"block-spacing\": [\n      \"error\",\n      \"always\"\n    ],\n    \"brace-style\": [\n      \"error\",\n      \"1tbs\"\n    ],\n    \"comma-spacing\": [\n      \"error\",\n      {\n        \"before\": false,\n        \"after\": true\n      }\n    ],\n    \"no-unused-vars\": \"off\",\n    \"space-before-function-paren\": [\n      \"error\",\n      {\n        \"anonymous\": \"always\",\n        \"named\": \"never\",\n        \"asyncArrow\": \"always\"\n      }\n    ],\n    \"default-case-last\": \"error\",\n    \"eqeqeq\": [\n      \"error\",\n      \"always\",\n      {\n        \"null\": \"ignore\"\n      }\n    ],\n    \"func-call-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"key-spacing\": [\n      \"error\",\n      {\n        \"beforeColon\": false,\n        \"afterColon\": true\n      }\n    ],\n    \"keyword-spacing\": [\n      \"error\",\n      {\n        \"before\": true,\n        \"after\": true\n      }\n    ],\n    \"no-console\": [\n      \"error\",\n      {\n        \"allow\": [\n          \"warn\",\n          \"error\"\n        ]\n      }\n    ],\n    \"comma-dangle\": [\n      \"error\",\n      \"always-multiline\"\n    ],\n    \"@typescript-eslint/no-unused-vars\": [\"error\",\n      { \n        \"argsIgnorePattern\": \"^_$\",\n        \"varsIgnorePattern\": \"^_$\",\n        \"caughtErrorsIgnorePattern\": \"^_$\"\n      }\n    ],\n    \"@typescript-eslint/no-var-requires\": \"error\",\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    \"react/prop-types\": \"off\"\n  }\n}",
        ".prettierrc": "{\n  \"trailingComma\": \"all\",\n  \"quoteProps\": \"preserve\",\n  \"tabWidth\": 2,\n  \"semi\": true,\n  \"singleQuote\": true\n}",
        "esbuild.config.js": "/*\n    BSD 3-Clause License    \n    Copyright (c) 2023, Doosan Robotics Inc.\n*/\nconst esbuild = require('esbuild');\nconst path = require('path');\nconst fs = require('fs-extra');\nconst AdmZip = require('adm-zip');\nconst obfuscator = require('javascript-obfuscator');\nconst svgrPlugin = require('esbuild-plugin-svgr');\nconst { sassPlugin, postcssModules } = require('esbuild-sass-plugin');\n\n// initialize manifest.json for root\nconst rootManifestFileName = 'manifest.json';\nconst rootManifest = require(`../${rootManifestFileName}`);\nconst packageJson = require(`./package.json`);\nconst packageName = rootManifest.packageName;\nconst assetDir = 'assets';\nconst drscModulePkgFileName = rootManifest.drscModulePackageFile;\nconst drcfModulePkgFileName = rootManifest.drcfModulePackageFile;\n\n// initialize manifest.json for DART-Platform\nconst manifestFileName = 'manifest.json';\nconst manifest = require(`./${manifestFileName}`);\n\n// initialize misc.\nconst rootDir = path.join(__dirname, '../');\nconst buildDir = path.join(__dirname, 'build');\nconst buildPkgDir = path.join(buildDir, packageName);\nconst outputDir = path.join(__dirname, '../../output');\nconst outputPkgDir = path.join(outputDir, packageName);\nfunction move(fileName, fromDir, toDir) {\n  if (fileName && fileName.trim().length > 0 && fs.existsSync(path.join(fromDir, fileName))) {\n    fs.moveSync(path.join(fromDir, fileName), path.join(toDir, fileName));\n  }\n}\n\nfunction copy(fileName, fromDir, toDir) {\n  if (fileName && fileName.trim().length > 0 && fs.existsSync(path.join(fromDir, fileName))) {\n    fs.copySync(path.join(fromDir, fileName), path.join(toDir, fileName));\n  }\n}\n\nfunction copyToDirPath(fileName, fromDir, toDirPath) {\n  if (fileName && fileName.trim().length > 0 && fs.existsSync(path.join(fromDir, fileName))) {\n    fs.copySync(path.join(fromDir, fileName), toDirPath);\n  }\n}\n\nfunction remove(fileName, fromDir) {\n  if (fileName && fileName.trim().length > 0 && fs.existsSync(path.join(fromDir, fileName))) {\n    fs.removeSync(path.join(fromDir, fileName));\n  }\n}\n\nfunction copyScreenIcons() {\n  for (let i = 0, {length} = manifest.screens; i < length; i++) {\n      const screen = manifest.screens[i];\n      if (screen.icon) {\n          copyToDirPath(screen.icon, __dirname, path.join(buildPkgDir, \"assets\", screen.icon));\n      }\n  }\n}\n\nasync function packDrscModulePackage() {\n  copyScreenIcons();\n  copy(manifestFileName, __dirname, buildPkgDir);\n  copyToDirPath(`src/assets/uc`, __dirname, path.join(buildPkgDir, 'assets/uc'));\n  copyToDirPath(`src/assets/raws`, __dirname, path.join(buildPkgDir, 'assets/raws'));\n  const zip = new AdmZip();\n  zip.addLocalFolder(buildPkgDir);\n  const dstName = path.join(buildDir, drscModulePkgFileName);\n  await zip\n    .writeZipPromise(dstName, null)\n    .then(() => {\n      console.log(`Successfully compress ${buildPkgDir} to ${dstName}.`);\n    })\n    .catch((e) => {\n      console.error(e);\n    });\n}\n\nasync function packTotalModulePackage() {\n  copy(assetDir, rootDir, outputPkgDir);\n  copy(rootManifestFileName, rootDir, outputPkgDir);\n  copy(drscModulePkgFileName, buildDir, outputPkgDir);\n  copy(drcfModulePkgFileName, rootDir, outputPkgDir);\n\n  const zip = new AdmZip();\n  zip.addLocalFolder(outputPkgDir);\n  const dmFileName = `${packageName}_${rootManifest.version}.dm`;\n  const dstName = path.join(outputDir, dmFileName);\n  await zip\n    .writeZipPromise(dstName, null)\n    .then(() => {\n      remove(packageName, outputDir);\n      move(dmFileName, outputDir, outputPkgDir);\n      console.log(`Successfully compress ${outputPkgDir} to ${path.join(outputPkgDir, dmFileName)}.`);\n    })\n    .catch((e) => {\n      console.error(e);\n    });\n}\n\nfunction packModulePackage() {\n  return {\n    name: 'PackagingModulePackage',\n    setup(build) {\n      build.onStart(() => {\n        remove(packageName, buildDir);\n        remove(packageName, outputDir);\n        remove(`${packageName}.dm`, outputDir);\n      });\n      build.onEnd(async () => {\n        await packDrscModulePackage()\n          .then(async () => await packTotalModulePackage())\n          .catch((e) => console.error(e));\n      });\n    },\n  };\n}\n\nfunction obfuscatorPlugin(options = {}) {\n  return {\n    name: 'Obfuscator',\n    setup(build) {\n      build.onEnd(async () => {\n        const outputFilePath = build.initialOptions.outfile;\n        if (await fs.pathExists(outputFilePath)) {\n          const contents = await fs.readFile(outputFilePath, 'utf8');\n          const addStyleText = `document.head.appendChild(document.createElement(\"style\"))`;\n          const contentFinal = contents.replaceAll(addStyleText, `var elStyle = ${addStyleText}; elStyle.id = \"module_${packageName}\"; elStyle`);\n          const result = obfuscator.obfuscate(\n            contentFinal, // Output file from ESBuild\n            {\n              // Obfuscation options (you can customize these)\n              // Add more obfuscation options here\n              ...options,\n            },\n          );\n          if (result) {\n            // Write the obfuscated code back to the output file\n            await fs.writeFile(outputFilePath, `(()=>{${result.getObfuscatedCode()}})();/*moduleU2FsdGVkX1+o8OlVNpDbxdwBRR9zmO9if6YBzvwJJkI=*/`);\n          }\n        }\n      });\n    },\n  };\n}\n\nfunction toUnixPath(path) {\n  return path.replace(/[\\\\/]+/g, '/').replace(/^([a-zA-Z]+:|\\.\\/)/, '');\n}\n\nfunction assetFileLoaderPlugin() {\n  // Workaround for https://github.com/evanw/esbuild/issues/1441\n  return {\n    name: 'AssetFileLoader',\n    setup: (build) => {\n      build.onLoad(\n        {\n          filter: /.*/,\n        },\n        async (args) => {\n          if (!/\\.((m?jsx?)|(tsx?)|(c|sc|sa)ss|(svg)|(json))$/.test(args.path)) {\n            if (await fs.pathExists(args.path)) {\n              const contents = await fs.readFile(args.path);\n              const assetFilePath = path.join(assetDir, args.path.replace(__dirname, ''));\n              const assetOutputPath = path.join(buildPkgDir, assetFilePath);\n\n              await fs.mkdir(path.dirname(assetOutputPath), {\n                recursive: true,\n              });\n              await fs.writeFile(assetOutputPath, contents);\n              return {\n                contents: `\n                const moduleScript = Array.from(document.body.childNodes).find(child => child.id === 'script-${packageName}');\n                let path = '${toUnixPath(assetFilePath)}';\n                path = moduleScript?.src?.replace('${manifest.main}', path) ?? path;\n                export default path;`,\n                loader: 'js',\n              };\n            }\n          }\n        },\n      );\n    },\n  };\n}\n\nconst timeStart = performance.now();\nesbuild\n  .build({\n    entryPoints: [`./src/index.tsx`], // Your main entry file\n    bundle: true,\n    outfile: path.join(buildPkgDir, manifest.main),\n    legalComments: 'external',\n    minify: true,\n    format: 'esm',\n    plugins: [\n      assetFileLoaderPlugin(),\n      sassPlugin({\n        type: 'style',\n        transform: postcssModules({generateScopedName: `[module_${packageName}][local]`}),\n      }),\n      svgrPlugin(),\n      obfuscatorPlugin(),\n      packModulePackage(),\n    ],\n  })\n  .then(() => {\n    console.log('Build complete! ✅', performance.now() - timeStart);\n  })\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  });\n"
    }
}